<?php
/**
 * ProfileOperationUpdateOrCreateList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2025-01-15
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * ProfileOperationUpdateOrCreateList Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProfileOperationUpdateOrCreateList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProfileOperationUpdateOrCreateList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'operator' => 'string',
        'property_type' => '\KlaviyoAPI\Model\ListEnum',
        'property_operation' => 'string',
        'property_key' => 'string',
        'property_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'operator' => null,
        'property_type' => null,
        'property_operation' => null,
        'property_key' => null,
        'property_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'operator' => false,
		'property_type' => false,
		'property_operation' => false,
		'property_key' => false,
		'property_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operator' => 'operator',
        'property_type' => 'property_type',
        'property_operation' => 'property_operation',
        'property_key' => 'property_key',
        'property_value' => 'property_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operator' => 'setOperator',
        'property_type' => 'setPropertyType',
        'property_operation' => 'setPropertyOperation',
        'property_key' => 'setPropertyKey',
        'property_value' => 'setPropertyValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operator' => 'getOperator',
        'property_type' => 'getPropertyType',
        'property_operation' => 'getPropertyOperation',
        'property_key' => 'getPropertyKey',
        'property_value' => 'getPropertyValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OPERATOR_CREATE = 'create';
    public const OPERATOR_UPDATE = 'update';
    public const PROPERTY_OPERATION_ADD = 'add';
    public const PROPERTY_OPERATION_REMOVE = 'remove';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_CREATE,
            self::OPERATOR_UPDATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyOperationAllowableValues()
    {
        return [
            self::PROPERTY_OPERATION_ADD,
            self::PROPERTY_OPERATION_REMOVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('property_type', $data ?? [], null);
        $this->setIfExists('property_operation', $data ?? [], null);
        $this->setIfExists('property_key', $data ?? [], null);
        $this->setIfExists('property_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'operator', must be one of '%s'",
                $this->container['operator'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['property_type'] === null) {
            $invalidProperties[] = "'property_type' can't be null";
        }
        if ($this->container['property_operation'] === null) {
            $invalidProperties[] = "'property_operation' can't be null";
        }
        $allowedValues = $this->getPropertyOperationAllowableValues();
        if (!is_null($this->container['property_operation']) && !in_array($this->container['property_operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'property_operation', must be one of '%s'",
                $this->container['property_operation'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['property_key'] === null) {
            $invalidProperties[] = "'property_key' can't be null";
        }
        if ($this->container['property_value'] === null) {
            $invalidProperties[] = "'property_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator The type of operation to perform on a profile property.
     *
     * @return self
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'operator', must be one of '%s'",
                    $operator,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }

        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return \KlaviyoAPI\Model\ListEnum
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param \KlaviyoAPI\Model\ListEnum $property_type property_type
     *
     * @return self
     */
    public function setPropertyType($property_type)
    {

        if (is_null($property_type)) {
            throw new \InvalidArgumentException('non-nullable property_type cannot be null');
        }

        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets property_operation
     *
     * @return string
     */
    public function getPropertyOperation()
    {
        return $this->container['property_operation'];
    }

    /**
     * Sets property_operation
     *
     * @param string $property_operation The type of operation to perform on a list property.
     *
     * @return self
     */
    public function setPropertyOperation($property_operation)
    {
        $allowedValues = $this->getPropertyOperationAllowableValues();
        if (!in_array($property_operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'property_operation', must be one of '%s'",
                    $property_operation,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($property_operation)) {
            throw new \InvalidArgumentException('non-nullable property_operation cannot be null');
        }

        $this->container['property_operation'] = $property_operation;

        return $this;
    }

    /**
     * Gets property_key
     *
     * @return string
     */
    public function getPropertyKey()
    {
        return $this->container['property_key'];
    }

    /**
     * Sets property_key
     *
     * @param string $property_key property_key
     *
     * @return self
     */
    public function setPropertyKey($property_key)
    {

        if (is_null($property_key)) {
            throw new \InvalidArgumentException('non-nullable property_key cannot be null');
        }

        $this->container['property_key'] = $property_key;

        return $this;
    }

    /**
     * Gets property_value
     *
     * @return string
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     *
     * @param string $property_value property_value
     *
     * @return self
     */
    public function setPropertyValue($property_value)
    {

        if (is_null($property_value)) {
            throw new \InvalidArgumentException('non-nullable property_value cannot be null');
        }

        $this->container['property_value'] = $property_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


