<?php
/**
 * FormSeriesRequestDTOResourceObjectAttributes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2025-01-15
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * FormSeriesRequestDTOResourceObjectAttributes Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FormSeriesRequestDTOResourceObjectAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FormSeriesRequestDTOResourceObject_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'statistics' => 'string[]',
        'timeframe' => '\KlaviyoAPI\Model\CampaignValuesRequestDTOResourceObjectAttributesTimeframe',
        'interval' => 'string',
        'group_by' => 'string[]',
        'filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'statistics' => null,
        'timeframe' => null,
        'interval' => null,
        'group_by' => null,
        'filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'statistics' => false,
		'timeframe' => false,
		'interval' => false,
		'group_by' => true,
		'filter' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statistics' => 'statistics',
        'timeframe' => 'timeframe',
        'interval' => 'interval',
        'group_by' => 'group_by',
        'filter' => 'filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statistics' => 'setStatistics',
        'timeframe' => 'setTimeframe',
        'interval' => 'setInterval',
        'group_by' => 'setGroupBy',
        'filter' => 'setFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statistics' => 'getStatistics',
        'timeframe' => 'getTimeframe',
        'interval' => 'getInterval',
        'group_by' => 'getGroupBy',
        'filter' => 'getFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATISTICS_CLOSED_FORM = 'closed_form';
    public const STATISTICS_CLOSED_FORM_UNIQUES = 'closed_form_uniques';
    public const STATISTICS_QUALIFIED_FORM = 'qualified_form';
    public const STATISTICS_QUALIFIED_FORM_UNIQUES = 'qualified_form_uniques';
    public const STATISTICS_SUBMIT_RATE = 'submit_rate';
    public const STATISTICS_SUBMITS = 'submits';
    public const STATISTICS_SUBMITTED_FORM_STEP = 'submitted_form_step';
    public const STATISTICS_SUBMITTED_FORM_STEP_UNIQUES = 'submitted_form_step_uniques';
    public const STATISTICS_VIEWED_FORM = 'viewed_form';
    public const STATISTICS_VIEWED_FORM_STEP = 'viewed_form_step';
    public const STATISTICS_VIEWED_FORM_STEP_UNIQUES = 'viewed_form_step_uniques';
    public const STATISTICS_VIEWED_FORM_UNIQUES = 'viewed_form_uniques';
    public const INTERVAL_DAILY = 'daily';
    public const INTERVAL_HOURLY = 'hourly';
    public const INTERVAL_MONTHLY = 'monthly';
    public const INTERVAL_WEEKLY = 'weekly';
    public const GROUP_BY_ID = 'form_id';
    public const GROUP_BY_VERSION_ID = 'form_version_id';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatisticsAllowableValues()
    {
        return [
            self::STATISTICS_CLOSED_FORM,
            self::STATISTICS_CLOSED_FORM_UNIQUES,
            self::STATISTICS_QUALIFIED_FORM,
            self::STATISTICS_QUALIFIED_FORM_UNIQUES,
            self::STATISTICS_SUBMIT_RATE,
            self::STATISTICS_SUBMITS,
            self::STATISTICS_SUBMITTED_FORM_STEP,
            self::STATISTICS_SUBMITTED_FORM_STEP_UNIQUES,
            self::STATISTICS_VIEWED_FORM,
            self::STATISTICS_VIEWED_FORM_STEP,
            self::STATISTICS_VIEWED_FORM_STEP_UNIQUES,
            self::STATISTICS_VIEWED_FORM_UNIQUES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_DAILY,
            self::INTERVAL_HOURLY,
            self::INTERVAL_MONTHLY,
            self::INTERVAL_WEEKLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGroupByAllowableValues()
    {
        return [
            self::GROUP_BY_ID,
            self::GROUP_BY_VERSION_ID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('statistics', $data ?? [], null);
        $this->setIfExists('timeframe', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('group_by', $data ?? [], null);
        $this->setIfExists('filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['statistics'] === null) {
            $invalidProperties[] = "'statistics' can't be null";
        }
        if ($this->container['timeframe'] === null) {
            $invalidProperties[] = "'timeframe' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statistics
     *
     * @return string[]
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param string[] $statistics List of statistics to query for. All rate statistics will be returned in fractional form [0.0, 1.0]
     *
     * @return self
     */
    public function setStatistics($statistics)
    {
        $allowedValues = $this->getStatisticsAllowableValues();
        if (array_diff($statistics, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statistics', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($statistics)) {
            throw new \InvalidArgumentException('non-nullable statistics cannot be null');
        }

        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets timeframe
     *
     * @return \KlaviyoAPI\Model\CampaignValuesRequestDTOResourceObjectAttributesTimeframe
     */
    public function getTimeframe()
    {
        return $this->container['timeframe'];
    }

    /**
     * Sets timeframe
     *
     * @param \KlaviyoAPI\Model\CampaignValuesRequestDTOResourceObjectAttributesTimeframe $timeframe timeframe
     *
     * @return self
     */
    public function setTimeframe($timeframe)
    {

        if (is_null($timeframe)) {
            throw new \InvalidArgumentException('non-nullable timeframe cannot be null');
        }

        $this->container['timeframe'] = $timeframe;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval The interval used to aggregate data within the series request. If hourly is used, the timeframe cannot be longer than 7 days. If daily is used, the timeframe cannot be longer than 60 days. If monthly is used, the timeframe cannot be longer than 52 weeks.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $allowedValues = $this->getIntervalAllowableValues();
        if (!in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }

        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets group_by
     *
     * @return string[]|null
     */
    public function getGroupBy()
    {
        return $this->container['group_by'];
    }

    /**
     * Sets group_by
     *
     * @param string[]|null $group_by List of attributes to group the data by. Allowed group-bys are form_id, form_version_id. If not passed in, the data will be grouped by form_id. If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
     *
     * @return self
     */
    public function setGroupBy($group_by)
    {
        $allowedValues = $this->getGroupByAllowableValues();
        if (!is_null($group_by) && array_diff($group_by, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'group_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($group_by)) {
            array_push($this->openAPINullablesSetToNull, 'group_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['group_by'] = $group_by;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string|null $filter API filter string used to filter the query. Allowed filters are form_id, form_version_id. Allowed operators are equals, any. Only one filter can be used per attribute, only AND can be used as a combination operator. Max of 100 messages per ANY filter.
     *
     * @return self
     */
    public function setFilter($filter)
    {

        if (is_null($filter)) {
            array_push($this->openAPINullablesSetToNull, 'filter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['filter'] = $filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


