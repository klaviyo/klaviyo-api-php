<?php
/**
 * AbTestActionDataCurrentExperiment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2025-04-15
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * AbTestActionDataCurrentExperiment Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AbTestActionDataCurrentExperiment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AbTestAction_data_current_experiment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'variations' => '\KlaviyoAPI\Model\AbTestActionDataMainAction[]',
        'allocations' => 'object',
        'started' => '\DateTime',
        'winner_metric' => 'string',
        'automatic_winner_selection_settings' => '\KlaviyoAPI\Model\AutomaticWinnerSelectionSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'variations' => null,
        'allocations' => null,
        'started' => 'date-time',
        'winner_metric' => null,
        'automatic_winner_selection_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'name' => true,
		'variations' => false,
		'allocations' => false,
		'started' => true,
		'winner_metric' => false,
		'automatic_winner_selection_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'variations' => 'variations',
        'allocations' => 'allocations',
        'started' => 'started',
        'winner_metric' => 'winner_metric',
        'automatic_winner_selection_settings' => 'automatic_winner_selection_settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'variations' => 'setVariations',
        'allocations' => 'setAllocations',
        'started' => 'setStarted',
        'winner_metric' => 'setWinnerMetric',
        'automatic_winner_selection_settings' => 'setAutomaticWinnerSelectionSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'variations' => 'getVariations',
        'allocations' => 'getAllocations',
        'started' => 'getStarted',
        'winner_metric' => 'getWinnerMetric',
        'automatic_winner_selection_settings' => 'getAutomaticWinnerSelectionSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WINNER_METRIC_SUBMISSION = 'submission';
    public const WINNER_METRIC_UNIQUE_CLICKS = 'unique-clicks';
    public const WINNER_METRIC_UNIQUE_OPENS = 'unique-opens';
    public const WINNER_METRIC_UNIQUE_PLACED_ORDERS = 'unique-placed-orders';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWinnerMetricAllowableValues()
    {
        return [
            self::WINNER_METRIC_SUBMISSION,
            self::WINNER_METRIC_UNIQUE_CLICKS,
            self::WINNER_METRIC_UNIQUE_OPENS,
            self::WINNER_METRIC_UNIQUE_PLACED_ORDERS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('variations', $data ?? [], null);
        $this->setIfExists('allocations', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('winner_metric', $data ?? [], null);
        $this->setIfExists('automatic_winner_selection_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['variations'] === null) {
            $invalidProperties[] = "'variations' can't be null";
        }
        if ($this->container['allocations'] === null) {
            $invalidProperties[] = "'allocations' can't be null";
        }
        if ($this->container['winner_metric'] === null) {
            $invalidProperties[] = "'winner_metric' can't be null";
        }
        $allowedValues = $this->getWinnerMetricAllowableValues();
        if (!is_null($this->container['winner_metric']) && !in_array($this->container['winner_metric'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'winner_metric', must be one of '%s'",
                $this->container['winner_metric'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['automatic_winner_selection_settings'] === null) {
            $invalidProperties[] = "'automatic_winner_selection_settings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets variations
     *
     * @return \KlaviyoAPI\Model\AbTestActionDataMainAction[]
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     *
     * @param \KlaviyoAPI\Model\AbTestActionDataMainAction[] $variations variations
     *
     * @return self
     */
    public function setVariations($variations)
    {

        if (is_null($variations)) {
            throw new \InvalidArgumentException('non-nullable variations cannot be null');
        }

        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets allocations
     *
     * @return object
     */
    public function getAllocations()
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param object $allocations allocations
     *
     * @return self
     */
    public function setAllocations($allocations)
    {

        if (is_null($allocations)) {
            throw new \InvalidArgumentException('non-nullable allocations cannot be null');
        }

        $this->container['allocations'] = $allocations;

        return $this;
    }

    /**
     * Gets started
     *
     * @return \DateTime|null
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param \DateTime|null $started started
     *
     * @return self
     */
    public function setStarted($started)
    {

        if (is_null($started)) {
            array_push($this->openAPINullablesSetToNull, 'started');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('started', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets winner_metric
     *
     * @return string
     */
    public function getWinnerMetric()
    {
        return $this->container['winner_metric'];
    }

    /**
     * Sets winner_metric
     *
     * @param string $winner_metric The metric to use to determine the winner of the A/B test action.  Note that this is different from the metrics used as a flow trigger.
     *
     * @return self
     */
    public function setWinnerMetric($winner_metric)
    {
        $allowedValues = $this->getWinnerMetricAllowableValues();
        if (!in_array($winner_metric, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'winner_metric', must be one of '%s'",
                    $winner_metric,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($winner_metric)) {
            throw new \InvalidArgumentException('non-nullable winner_metric cannot be null');
        }

        $this->container['winner_metric'] = $winner_metric;

        return $this;
    }

    /**
     * Gets automatic_winner_selection_settings
     *
     * @return \KlaviyoAPI\Model\AutomaticWinnerSelectionSettings
     */
    public function getAutomaticWinnerSelectionSettings()
    {
        return $this->container['automatic_winner_selection_settings'];
    }

    /**
     * Sets automatic_winner_selection_settings
     *
     * @param \KlaviyoAPI\Model\AutomaticWinnerSelectionSettings $automatic_winner_selection_settings automatic_winner_selection_settings
     *
     * @return self
     */
    public function setAutomaticWinnerSelectionSettings($automatic_winner_selection_settings)
    {

        if (is_null($automatic_winner_selection_settings)) {
            throw new \InvalidArgumentException('non-nullable automatic_winner_selection_settings cannot be null');
        }

        $this->container['automatic_winner_selection_settings'] = $automatic_winner_selection_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


