<?php
/**
 * CustomObjectsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use KlaviyoAPI\ApiException;
use KlaviyoAPI\Configuration;
use KlaviyoAPI\FormDataProcessor;
use KlaviyoAPI\HeaderSelector;
use KlaviyoAPI\ObjectSerializer;

/**
 * CustomObjectsApi Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomObjectsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkCreateDataSourceRecords' => [
            'application/vnd.api+json',
        ],
        'createDataSource' => [
            'application/vnd.api+json',
        ],
        'deleteDataSource' => [
            'application/vnd.api+json',
        ],
        'getDataSource' => [
            'application/vnd.api+json',
        ],
        'getDataSources' => [
            'application/vnd.api+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkCreateDataSourceRecords
     *
     * Bulk Create Data Source Records
     *
     * @param  \KlaviyoAPI\Model\DataSourceRecordBulkCreateJobCreateQuery $data_source_record_bulk_create_job_create_query Create a data source record job (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateDataSourceRecords'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkCreateDataSourceRecords($data_source_record_bulk_create_job_create_query, $apiKey = null, string $contentType = self::contentTypes['bulkCreateDataSourceRecords'][0])
    {
        $this->bulkCreateDataSourceRecordsWithHttpInfo($data_source_record_bulk_create_job_create_query, $apiKey, $contentType);
    }

    /**
     * Alias of `bulkCreateDataSourceRecords`
     *
     * @deprecated use `bulkCreateDataSourceRecords` instead
     */
    public function createDataSourceRecordBulkCreateJob(...$args) {
        return $this->bulkCreateDataSourceRecords(...$args);
    }

    /**
     * Operation bulkCreateDataSourceRecordsWithHttpInfo
     *
     * Bulk Create Data Source Records
     *
     * @param  \KlaviyoAPI\Model\DataSourceRecordBulkCreateJobCreateQuery $data_source_record_bulk_create_job_create_query Create a data source record job (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateDataSourceRecords'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkCreateDataSourceRecordsWithHttpInfo($data_source_record_bulk_create_job_create_query, $apiKey = null, string $contentType = self::contentTypes['bulkCreateDataSourceRecords'][0])
    {
        $request = $this->bulkCreateDataSourceRecordsRequest($data_source_record_bulk_create_job_create_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `bulkCreateDataSourceRecordsWithHttpInfo`
     *
     * @deprecated use `bulkCreateDataSourceRecordsWithHttpInfo` instead
     */
    public function createDataSourceRecordBulkCreateJobWithHttpInfo(...$args) {
        return $this->bulkCreateDataSourceRecordsWithHttpInfo(...$args);
    }

    /**
     * Operation bulkCreateDataSourceRecordsAsync
     *
     * Bulk Create Data Source Records
     *
     * @param  \KlaviyoAPI\Model\DataSourceRecordBulkCreateJobCreateQuery $data_source_record_bulk_create_job_create_query Create a data source record job (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateDataSourceRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateDataSourceRecordsAsync($data_source_record_bulk_create_job_create_query, $apiKey = null, string $contentType = self::contentTypes['bulkCreateDataSourceRecords'][0])
    {
        return $this->bulkCreateDataSourceRecordsAsyncWithHttpInfo($data_source_record_bulk_create_job_create_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `bulkCreateDataSourceRecordsAsync`
     *
     * @deprecated use `bulkCreateDataSourceRecordsAsync` instead
     */
    public function createDataSourceRecordBulkCreateJobAsync(...$args) {
        return $this->bulkCreateDataSourceRecordsAsync(...$args);
    }

    /**
     * Operation bulkCreateDataSourceRecordsAsyncWithHttpInfo
     *
     * Bulk Create Data Source Records
     *
     * @param  \KlaviyoAPI\Model\DataSourceRecordBulkCreateJobCreateQuery $data_source_record_bulk_create_job_create_query Create a data source record job (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateDataSourceRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateDataSourceRecordsAsyncWithHttpInfo($data_source_record_bulk_create_job_create_query, $apiKey = null, string $contentType = self::contentTypes['bulkCreateDataSourceRecords'][0])
    {
        $returnType = '';
        $request = $this->bulkCreateDataSourceRecordsRequest($data_source_record_bulk_create_job_create_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `bulkCreateDataSourceRecordsAsyncWithHttpInfo`
     *
     * @deprecated use `bulkCreateDataSourceRecordsAsyncWithHttpInfo` instead
     */
    public function createDataSourceRecordBulkCreateJobAsyncWithHttpInfo(...$args) {
        return $this->bulkCreateDataSourceRecordsAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'bulkCreateDataSourceRecords'
     *
     * @param  \KlaviyoAPI\Model\DataSourceRecordBulkCreateJobCreateQuery $data_source_record_bulk_create_job_create_query Create a data source record job (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateDataSourceRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkCreateDataSourceRecordsRequest($data_source_record_bulk_create_job_create_query, $apiKey = null, string $contentType = self::contentTypes['bulkCreateDataSourceRecords'][0])
    {

        // verify the required parameter 'data_source_record_bulk_create_job_create_query' is set
        if ($data_source_record_bulk_create_job_create_query === null || (is_array($data_source_record_bulk_create_job_create_query) && count($data_source_record_bulk_create_job_create_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_record_bulk_create_job_create_query when calling bulkCreateDataSourceRecords'
            );
        }


        $resourcePath = '/api/data-source-record-bulk-create-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_source_record_bulk_create_job_create_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_source_record_bulk_create_job_create_query));
            } else {
                $httpBody = $data_source_record_bulk_create_job_create_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `bulkCreateDataSourceRecordsRequest`
     *
     * @deprecated use `bulkCreateDataSourceRecordsRequest` instead
     */
    public function createDataSourceRecordBulkCreateJobRequest(...$args) {
        return $this->bulkCreateDataSourceRecordsRequest(...$args);
    }

    /**
     * Operation createDataSource
     *
     * Create Data Source
     *
     * @param  \KlaviyoAPI\Model\DataSourceCreateQuery $data_source_create_query Create data source (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function createDataSource($data_source_create_query, $apiKey = null, string $contentType = self::contentTypes['createDataSource'][0])
    {
        list($response) = $this->createDataSourceWithHttpInfo($data_source_create_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation createDataSourceWithHttpInfo
     *
     * Create Data Source
     *
     * @param  \KlaviyoAPI\Model\DataSourceCreateQuery $data_source_create_query Create data source (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDataSourceWithHttpInfo($data_source_create_query, $apiKey = null, string $contentType = self::contentTypes['createDataSource'][0])
    {
        $request = $this->createDataSourceRequest($data_source_create_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createDataSourceAsync
     *
     * Create Data Source
     *
     * @param  \KlaviyoAPI\Model\DataSourceCreateQuery $data_source_create_query Create data source (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDataSourceAsync($data_source_create_query, $apiKey = null, string $contentType = self::contentTypes['createDataSource'][0])
    {
        return $this->createDataSourceAsyncWithHttpInfo($data_source_create_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDataSourceAsyncWithHttpInfo
     *
     * Create Data Source
     *
     * @param  \KlaviyoAPI\Model\DataSourceCreateQuery $data_source_create_query Create data source (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDataSourceAsyncWithHttpInfo($data_source_create_query, $apiKey = null, string $contentType = self::contentTypes['createDataSource'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->createDataSourceRequest($data_source_create_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDataSource'
     *
     * @param  \KlaviyoAPI\Model\DataSourceCreateQuery $data_source_create_query Create data source (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDataSourceRequest($data_source_create_query, $apiKey = null, string $contentType = self::contentTypes['createDataSource'][0])
    {

        // verify the required parameter 'data_source_create_query' is set
        if ($data_source_create_query === null || (is_array($data_source_create_query) && count($data_source_create_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_create_query when calling createDataSource'
            );
        }


        $resourcePath = '/api/data-sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_source_create_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_source_create_query));
            } else {
                $httpBody = $data_source_create_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDataSource
     *
     * Delete Data Source
     *
     * @param  string $id The ID of the data source to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDataSource($id, $apiKey = null, string $contentType = self::contentTypes['deleteDataSource'][0])
    {
        $this->deleteDataSourceWithHttpInfo($id, $apiKey, $contentType);
    }

    /**
     * Operation deleteDataSourceWithHttpInfo
     *
     * Delete Data Source
     *
     * @param  string $id The ID of the data source to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDataSourceWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['deleteDataSource'][0])
    {
        $request = $this->deleteDataSourceRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteDataSourceAsync
     *
     * Delete Data Source
     *
     * @param  string $id The ID of the data source to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataSourceAsync($id, $apiKey = null, string $contentType = self::contentTypes['deleteDataSource'][0])
    {
        return $this->deleteDataSourceAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDataSourceAsyncWithHttpInfo
     *
     * Delete Data Source
     *
     * @param  string $id The ID of the data source to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataSourceAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['deleteDataSource'][0])
    {
        $returnType = '';
        $request = $this->deleteDataSourceRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDataSource'
     *
     * @param  string $id The ID of the data source to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDataSourceRequest($id, $apiKey = null, string $contentType = self::contentTypes['deleteDataSource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDataSource'
            );
        }


        $resourcePath = '/api/data-sources/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataSource
     *
     * Get Data Source
     *
     * @param  string $id The ID of the data source (required)
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getDataSource($id, $fields_data_source = null, $apiKey = null, string $contentType = self::contentTypes['getDataSource'][0])
    {
        list($response) = $this->getDataSourceWithHttpInfo($id, $fields_data_source, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getDataSourceWithHttpInfo
     *
     * Get Data Source
     *
     * @param  string $id The ID of the data source (required)
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSource'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataSourceWithHttpInfo($id, $fields_data_source = null, $apiKey = null, string $contentType = self::contentTypes['getDataSource'][0])
    {
        $request = $this->getDataSourceRequest($id, $fields_data_source, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataSourceAsync
     *
     * Get Data Source
     *
     * @param  string $id The ID of the data source (required)
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSourceAsync($id, $fields_data_source = null, $apiKey = null, string $contentType = self::contentTypes['getDataSource'][0])
    {
        return $this->getDataSourceAsyncWithHttpInfo($id, $fields_data_source, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataSourceAsyncWithHttpInfo
     *
     * Get Data Source
     *
     * @param  string $id The ID of the data source (required)
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSourceAsyncWithHttpInfo($id, $fields_data_source = null, $apiKey = null, string $contentType = self::contentTypes['getDataSource'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getDataSourceRequest($id, $fields_data_source, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataSource'
     *
     * @param  string $id The ID of the data source (required)
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSource'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataSourceRequest($id, $fields_data_source = null, $apiKey = null, string $contentType = self::contentTypes['getDataSource'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDataSource'
            );
        }



        $resourcePath = '/api/data-sources/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_data_source,
            'fields[data-source]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataSources
     *
     * Get Data Sources
     *
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  int|null $page_size Default: 20. Min: 1. Max: 100. (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSources'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getDataSources($fields_data_source = null, $page_cursor = null, $page_size = 20, $apiKey = null, string $contentType = self::contentTypes['getDataSources'][0])
    {
        list($response) = $this->getDataSourcesWithHttpInfo($fields_data_source, $page_cursor, $page_size, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getDataSourcesWithHttpInfo
     *
     * Get Data Sources
     *
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  int|null $page_size Default: 20. Min: 1. Max: 100. (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSources'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataSourcesWithHttpInfo($fields_data_source = null, $page_cursor = null, $page_size = 20, $apiKey = null, string $contentType = self::contentTypes['getDataSources'][0])
    {
        $request = $this->getDataSourcesRequest($fields_data_source, $page_cursor, $page_size, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataSourcesAsync
     *
     * Get Data Sources
     *
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  int|null $page_size Default: 20. Min: 1. Max: 100. (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSourcesAsync($fields_data_source = null, $page_cursor = null, $page_size = 20, $apiKey = null, string $contentType = self::contentTypes['getDataSources'][0])
    {
        return $this->getDataSourcesAsyncWithHttpInfo($fields_data_source, $page_cursor, $page_size, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataSourcesAsyncWithHttpInfo
     *
     * Get Data Sources
     *
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  int|null $page_size Default: 20. Min: 1. Max: 100. (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSourcesAsyncWithHttpInfo($fields_data_source = null, $page_cursor = null, $page_size = 20, $apiKey = null, string $contentType = self::contentTypes['getDataSources'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getDataSourcesRequest($fields_data_source, $page_cursor, $page_size, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataSources'
     *
     * @param  string[]|null $fields_data_source For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  int|null $page_size Default: 20. Min: 1. Max: 100. (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataSourcesRequest($fields_data_source = null, $page_cursor = null, $page_size = 20, $apiKey = null, string $contentType = self::contentTypes['getDataSources'][0])
    {



        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomObjectsApi.getDataSources, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CustomObjectsApi.getDataSources, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/api/data-sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_data_source,
            'fields[data-source]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page[cursor]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page[size]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        $parsed_content = json_decode(json_encode($content), TRUE);
        if (json_last_error() != JSON_ERROR_NONE) {
            $parsed_content = $content;
        }

        return [
            $parsed_content,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
