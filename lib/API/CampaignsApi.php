<?php
/**
 * CampaignsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use KlaviyoAPI\ApiException;
use KlaviyoAPI\Configuration;
use KlaviyoAPI\FormDataProcessor;
use KlaviyoAPI\HeaderSelector;
use KlaviyoAPI\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assignTemplateToCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'cancelCampaignSend' => [
            'application/vnd.api+json',
        ],
        'createCampaign' => [
            'application/vnd.api+json',
        ],
        'createCampaignClone' => [
            'application/vnd.api+json',
        ],
        'deleteCampaign' => [
            'application/vnd.api+json',
        ],
        'getCampaign' => [
            'application/vnd.api+json',
        ],
        'getCampaignForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getCampaignIdForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getCampaignRecipientEstimation' => [
            'application/vnd.api+json',
        ],
        'getCampaignRecipientEstimationJob' => [
            'application/vnd.api+json',
        ],
        'getCampaignSendJob' => [
            'application/vnd.api+json',
        ],
        'getCampaigns' => [
            'application/vnd.api+json',
        ],
        'getImageForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getImageIdForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getMessageIdsForCampaign' => [
            'application/vnd.api+json',
        ],
        'getMessagesForCampaign' => [
            'application/vnd.api+json',
        ],
        'getTagIdsForCampaign' => [
            'application/vnd.api+json',
        ],
        'getTagsForCampaign' => [
            'application/vnd.api+json',
        ],
        'getTemplateForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'getTemplateIdForCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'refreshCampaignRecipientEstimation' => [
            'application/vnd.api+json',
        ],
        'sendCampaign' => [
            'application/vnd.api+json',
        ],
        'updateCampaign' => [
            'application/vnd.api+json',
        ],
        'updateCampaignMessage' => [
            'application/vnd.api+json',
        ],
        'updateImageForCampaignMessage' => [
            'application/vnd.api+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignTemplateToCampaignMessage
     *
     * Assign Template to Campaign Message
     *
     * @param  \KlaviyoAPI\Model\CampaignMessageAssignTemplateQuery $campaign_message_assign_template_query Takes a reusable template, clones it, and assigns the non-reusable clone to the message. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignTemplateToCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function assignTemplateToCampaignMessage($campaign_message_assign_template_query, $apiKey = null, string $contentType = self::contentTypes['assignTemplateToCampaignMessage'][0])
    {
        list($response) = $this->assignTemplateToCampaignMessageWithHttpInfo($campaign_message_assign_template_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `assignTemplateToCampaignMessage`
     *
     * @deprecated use `assignTemplateToCampaignMessage` instead
     */
    public function createCampaignMessageAssignTemplate(...$args) {
        return $this->assignTemplateToCampaignMessage(...$args);
    }

    /**
     * Operation assignTemplateToCampaignMessageWithHttpInfo
     *
     * Assign Template to Campaign Message
     *
     * @param  \KlaviyoAPI\Model\CampaignMessageAssignTemplateQuery $campaign_message_assign_template_query Takes a reusable template, clones it, and assigns the non-reusable clone to the message. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignTemplateToCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignTemplateToCampaignMessageWithHttpInfo($campaign_message_assign_template_query, $apiKey = null, string $contentType = self::contentTypes['assignTemplateToCampaignMessage'][0])
    {
        $request = $this->assignTemplateToCampaignMessageRequest($campaign_message_assign_template_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `assignTemplateToCampaignMessageWithHttpInfo`
     *
     * @deprecated use `assignTemplateToCampaignMessageWithHttpInfo` instead
     */
    public function createCampaignMessageAssignTemplateWithHttpInfo(...$args) {
        return $this->assignTemplateToCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation assignTemplateToCampaignMessageAsync
     *
     * Assign Template to Campaign Message
     *
     * @param  \KlaviyoAPI\Model\CampaignMessageAssignTemplateQuery $campaign_message_assign_template_query Takes a reusable template, clones it, and assigns the non-reusable clone to the message. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignTemplateToCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTemplateToCampaignMessageAsync($campaign_message_assign_template_query, $apiKey = null, string $contentType = self::contentTypes['assignTemplateToCampaignMessage'][0])
    {
        return $this->assignTemplateToCampaignMessageAsyncWithHttpInfo($campaign_message_assign_template_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `assignTemplateToCampaignMessageAsync`
     *
     * @deprecated use `assignTemplateToCampaignMessageAsync` instead
     */
    public function createCampaignMessageAssignTemplateAsync(...$args) {
        return $this->assignTemplateToCampaignMessageAsync(...$args);
    }

    /**
     * Operation assignTemplateToCampaignMessageAsyncWithHttpInfo
     *
     * Assign Template to Campaign Message
     *
     * @param  \KlaviyoAPI\Model\CampaignMessageAssignTemplateQuery $campaign_message_assign_template_query Takes a reusable template, clones it, and assigns the non-reusable clone to the message. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignTemplateToCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTemplateToCampaignMessageAsyncWithHttpInfo($campaign_message_assign_template_query, $apiKey = null, string $contentType = self::contentTypes['assignTemplateToCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->assignTemplateToCampaignMessageRequest($campaign_message_assign_template_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `assignTemplateToCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `assignTemplateToCampaignMessageAsyncWithHttpInfo` instead
     */
    public function createCampaignMessageAssignTemplateAsyncWithHttpInfo(...$args) {
        return $this->assignTemplateToCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'assignTemplateToCampaignMessage'
     *
     * @param  \KlaviyoAPI\Model\CampaignMessageAssignTemplateQuery $campaign_message_assign_template_query Takes a reusable template, clones it, and assigns the non-reusable clone to the message. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignTemplateToCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignTemplateToCampaignMessageRequest($campaign_message_assign_template_query, $apiKey = null, string $contentType = self::contentTypes['assignTemplateToCampaignMessage'][0])
    {

        // verify the required parameter 'campaign_message_assign_template_query' is set
        if ($campaign_message_assign_template_query === null || (is_array($campaign_message_assign_template_query) && count($campaign_message_assign_template_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_message_assign_template_query when calling assignTemplateToCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-message-assign-template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_message_assign_template_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_message_assign_template_query));
            } else {
                $httpBody = $campaign_message_assign_template_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `assignTemplateToCampaignMessageRequest`
     *
     * @deprecated use `assignTemplateToCampaignMessageRequest` instead
     */
    public function createCampaignMessageAssignTemplateRequest(...$args) {
        return $this->assignTemplateToCampaignMessageRequest(...$args);
    }

    /**
     * Operation cancelCampaignSend
     *
     * Cancel Campaign Send
     *
     * @param  string $id The ID of the currently sending campaign to cancel or revert (required)
     * @param  \KlaviyoAPI\Model\CampaignSendJobPartialUpdateQuery $campaign_send_job_partial_update_query Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCampaignSend'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelCampaignSend($id, $campaign_send_job_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['cancelCampaignSend'][0])
    {
        $this->cancelCampaignSendWithHttpInfo($id, $campaign_send_job_partial_update_query, $apiKey, $contentType);
    }

    /**
     * Alias of `cancelCampaignSend`
     *
     * @deprecated use `cancelCampaignSend` instead
     */
    public function updateCampaignSendJob(...$args) {
        return $this->cancelCampaignSend(...$args);
    }

    /**
     * Operation cancelCampaignSendWithHttpInfo
     *
     * Cancel Campaign Send
     *
     * @param  string $id The ID of the currently sending campaign to cancel or revert (required)
     * @param  \KlaviyoAPI\Model\CampaignSendJobPartialUpdateQuery $campaign_send_job_partial_update_query Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCampaignSend'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelCampaignSendWithHttpInfo($id, $campaign_send_job_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['cancelCampaignSend'][0])
    {
        $request = $this->cancelCampaignSendRequest($id, $campaign_send_job_partial_update_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `cancelCampaignSendWithHttpInfo`
     *
     * @deprecated use `cancelCampaignSendWithHttpInfo` instead
     */
    public function updateCampaignSendJobWithHttpInfo(...$args) {
        return $this->cancelCampaignSendWithHttpInfo(...$args);
    }

    /**
     * Operation cancelCampaignSendAsync
     *
     * Cancel Campaign Send
     *
     * @param  string $id The ID of the currently sending campaign to cancel or revert (required)
     * @param  \KlaviyoAPI\Model\CampaignSendJobPartialUpdateQuery $campaign_send_job_partial_update_query Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCampaignSend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCampaignSendAsync($id, $campaign_send_job_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['cancelCampaignSend'][0])
    {
        return $this->cancelCampaignSendAsyncWithHttpInfo($id, $campaign_send_job_partial_update_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `cancelCampaignSendAsync`
     *
     * @deprecated use `cancelCampaignSendAsync` instead
     */
    public function updateCampaignSendJobAsync(...$args) {
        return $this->cancelCampaignSendAsync(...$args);
    }

    /**
     * Operation cancelCampaignSendAsyncWithHttpInfo
     *
     * Cancel Campaign Send
     *
     * @param  string $id The ID of the currently sending campaign to cancel or revert (required)
     * @param  \KlaviyoAPI\Model\CampaignSendJobPartialUpdateQuery $campaign_send_job_partial_update_query Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCampaignSend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCampaignSendAsyncWithHttpInfo($id, $campaign_send_job_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['cancelCampaignSend'][0])
    {
        $returnType = '';
        $request = $this->cancelCampaignSendRequest($id, $campaign_send_job_partial_update_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `cancelCampaignSendAsyncWithHttpInfo`
     *
     * @deprecated use `cancelCampaignSendAsyncWithHttpInfo` instead
     */
    public function updateCampaignSendJobAsyncWithHttpInfo(...$args) {
        return $this->cancelCampaignSendAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'cancelCampaignSend'
     *
     * @param  string $id The ID of the currently sending campaign to cancel or revert (required)
     * @param  \KlaviyoAPI\Model\CampaignSendJobPartialUpdateQuery $campaign_send_job_partial_update_query Permanently cancel the campaign, setting the status to CANCELED or revert the campaign, setting the status back to DRAFT (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCampaignSend'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelCampaignSendRequest($id, $campaign_send_job_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['cancelCampaignSend'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelCampaignSend'
            );
        }

        // verify the required parameter 'campaign_send_job_partial_update_query' is set
        if ($campaign_send_job_partial_update_query === null || (is_array($campaign_send_job_partial_update_query) && count($campaign_send_job_partial_update_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_send_job_partial_update_query when calling cancelCampaignSend'
            );
        }


        $resourcePath = '/api/campaign-send-jobs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_send_job_partial_update_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_send_job_partial_update_query));
            } else {
                $httpBody = $campaign_send_job_partial_update_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `cancelCampaignSendRequest`
     *
     * @deprecated use `cancelCampaignSendRequest` instead
     */
    public function updateCampaignSendJobRequest(...$args) {
        return $this->cancelCampaignSendRequest(...$args);
    }

    /**
     * Operation createCampaign
     *
     * Create Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignCreateQuery $campaign_create_query Creates a campaign from parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function createCampaign($campaign_create_query, $apiKey = null, string $contentType = self::contentTypes['createCampaign'][0])
    {
        list($response) = $this->createCampaignWithHttpInfo($campaign_create_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation createCampaignWithHttpInfo
     *
     * Create Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignCreateQuery $campaign_create_query Creates a campaign from parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignWithHttpInfo($campaign_create_query, $apiKey = null, string $contentType = self::contentTypes['createCampaign'][0])
    {
        $request = $this->createCampaignRequest($campaign_create_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createCampaignAsync
     *
     * Create Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignCreateQuery $campaign_create_query Creates a campaign from parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsync($campaign_create_query, $apiKey = null, string $contentType = self::contentTypes['createCampaign'][0])
    {
        return $this->createCampaignAsyncWithHttpInfo($campaign_create_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignAsyncWithHttpInfo
     *
     * Create Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignCreateQuery $campaign_create_query Creates a campaign from parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsyncWithHttpInfo($campaign_create_query, $apiKey = null, string $contentType = self::contentTypes['createCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->createCampaignRequest($campaign_create_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaign'
     *
     * @param  \KlaviyoAPI\Model\CampaignCreateQuery $campaign_create_query Creates a campaign from parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignRequest($campaign_create_query, $apiKey = null, string $contentType = self::contentTypes['createCampaign'][0])
    {

        // verify the required parameter 'campaign_create_query' is set
        if ($campaign_create_query === null || (is_array($campaign_create_query) && count($campaign_create_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_create_query when calling createCampaign'
            );
        }


        $resourcePath = '/api/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_create_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_create_query));
            } else {
                $httpBody = $campaign_create_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCampaignClone
     *
     * Create Campaign Clone
     *
     * @param  \KlaviyoAPI\Model\CampaignCloneQuery $campaign_clone_query Clones a campaign from an existing campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignClone'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function createCampaignClone($campaign_clone_query, $apiKey = null, string $contentType = self::contentTypes['createCampaignClone'][0])
    {
        list($response) = $this->createCampaignCloneWithHttpInfo($campaign_clone_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `createCampaignClone`
     *
     * @deprecated use `createCampaignClone` instead
     */
    public function cloneCampaign(...$args) {
        return $this->createCampaignClone(...$args);
    }

    /**
     * Operation createCampaignCloneWithHttpInfo
     *
     * Create Campaign Clone
     *
     * @param  \KlaviyoAPI\Model\CampaignCloneQuery $campaign_clone_query Clones a campaign from an existing campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignClone'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignCloneWithHttpInfo($campaign_clone_query, $apiKey = null, string $contentType = self::contentTypes['createCampaignClone'][0])
    {
        $request = $this->createCampaignCloneRequest($campaign_clone_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `createCampaignCloneWithHttpInfo`
     *
     * @deprecated use `createCampaignCloneWithHttpInfo` instead
     */
    public function cloneCampaignWithHttpInfo(...$args) {
        return $this->createCampaignCloneWithHttpInfo(...$args);
    }

    /**
     * Operation createCampaignCloneAsync
     *
     * Create Campaign Clone
     *
     * @param  \KlaviyoAPI\Model\CampaignCloneQuery $campaign_clone_query Clones a campaign from an existing campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignClone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignCloneAsync($campaign_clone_query, $apiKey = null, string $contentType = self::contentTypes['createCampaignClone'][0])
    {
        return $this->createCampaignCloneAsyncWithHttpInfo($campaign_clone_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `createCampaignCloneAsync`
     *
     * @deprecated use `createCampaignCloneAsync` instead
     */
    public function cloneCampaignAsync(...$args) {
        return $this->createCampaignCloneAsync(...$args);
    }

    /**
     * Operation createCampaignCloneAsyncWithHttpInfo
     *
     * Create Campaign Clone
     *
     * @param  \KlaviyoAPI\Model\CampaignCloneQuery $campaign_clone_query Clones a campaign from an existing campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignClone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignCloneAsyncWithHttpInfo($campaign_clone_query, $apiKey = null, string $contentType = self::contentTypes['createCampaignClone'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->createCampaignCloneRequest($campaign_clone_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `createCampaignCloneAsyncWithHttpInfo`
     *
     * @deprecated use `createCampaignCloneAsyncWithHttpInfo` instead
     */
    public function cloneCampaignAsyncWithHttpInfo(...$args) {
        return $this->createCampaignCloneAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'createCampaignClone'
     *
     * @param  \KlaviyoAPI\Model\CampaignCloneQuery $campaign_clone_query Clones a campaign from an existing campaign (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignClone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignCloneRequest($campaign_clone_query, $apiKey = null, string $contentType = self::contentTypes['createCampaignClone'][0])
    {

        // verify the required parameter 'campaign_clone_query' is set
        if ($campaign_clone_query === null || (is_array($campaign_clone_query) && count($campaign_clone_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_clone_query when calling createCampaignClone'
            );
        }


        $resourcePath = '/api/campaign-clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_clone_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_clone_query));
            } else {
                $httpBody = $campaign_clone_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `createCampaignCloneRequest`
     *
     * @deprecated use `createCampaignCloneRequest` instead
     */
    public function cloneCampaignRequest(...$args) {
        return $this->createCampaignCloneRequest(...$args);
    }

    /**
     * Operation deleteCampaign
     *
     * Delete Campaign
     *
     * @param  string $id The campaign ID to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCampaign($id, $apiKey = null, string $contentType = self::contentTypes['deleteCampaign'][0])
    {
        $this->deleteCampaignWithHttpInfo($id, $apiKey, $contentType);
    }

    /**
     * Operation deleteCampaignWithHttpInfo
     *
     * Delete Campaign
     *
     * @param  string $id The campaign ID to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['deleteCampaign'][0])
    {
        $request = $this->deleteCampaignRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteCampaignAsync
     *
     * Delete Campaign
     *
     * @param  string $id The campaign ID to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsync($id, $apiKey = null, string $contentType = self::contentTypes['deleteCampaign'][0])
    {
        return $this->deleteCampaignAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignAsyncWithHttpInfo
     *
     * Delete Campaign
     *
     * @param  string $id The campaign ID to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['deleteCampaign'][0])
    {
        $returnType = '';
        $request = $this->deleteCampaignRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaign'
     *
     * @param  string $id The campaign ID to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignRequest($id, $apiKey = null, string $contentType = self::contentTypes['deleteCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCampaign'
            );
        }


        $resourcePath = '/api/campaigns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaign
     *
     * Get Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaign($id, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaign'][0])
    {
        list($response) = $this->getCampaignWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignWithHttpInfo
     *
     * Get Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaign'][0])
    {
        $request = $this->getCampaignRequest($id, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignAsync
     *
     * Get Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsync($id, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaign'][0])
    {
        return $this->getCampaignAsyncWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignAsyncWithHttpInfo
     *
     * Get Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsyncWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignRequest($id, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaign'
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignRequest($id, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaign'
            );
        }






        $resourcePath = '/api/campaigns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_message,
            'fields[campaign-message]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign,
            'fields[campaign]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_tag,
            'fields[tag]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignForCampaignMessage
     *
     * Get Campaign for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignForCampaignMessage($id, $fields_campaign = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignForCampaignMessage'][0])
    {
        list($response) = $this->getCampaignForCampaignMessageWithHttpInfo($id, $fields_campaign, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getCampaignForCampaignMessage`
     *
     * @deprecated use `getCampaignForCampaignMessage` instead
     */
    public function getCampaignMessageCampaign(...$args) {
        return $this->getCampaignForCampaignMessage(...$args);
    }

    /**
     * Operation getCampaignForCampaignMessageWithHttpInfo
     *
     * Get Campaign for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignForCampaignMessageWithHttpInfo($id, $fields_campaign = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignForCampaignMessage'][0])
    {
        $request = $this->getCampaignForCampaignMessageRequest($id, $fields_campaign, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getCampaignForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getCampaignForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageCampaignWithHttpInfo(...$args) {
        return $this->getCampaignForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getCampaignForCampaignMessageAsync
     *
     * Get Campaign for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignForCampaignMessageAsync($id, $fields_campaign = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignForCampaignMessage'][0])
    {
        return $this->getCampaignForCampaignMessageAsyncWithHttpInfo($id, $fields_campaign, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getCampaignForCampaignMessageAsync`
     *
     * @deprecated use `getCampaignForCampaignMessageAsync` instead
     */
    public function getCampaignMessageCampaignAsync(...$args) {
        return $this->getCampaignForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getCampaignForCampaignMessageAsyncWithHttpInfo
     *
     * Get Campaign for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignForCampaignMessageAsyncWithHttpInfo($id, $fields_campaign = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignForCampaignMessageRequest($id, $fields_campaign, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getCampaignForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getCampaignForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageCampaignAsyncWithHttpInfo(...$args) {
        return $this->getCampaignForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getCampaignForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignForCampaignMessageRequest($id, $fields_campaign = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignForCampaignMessage'
            );
        }



        $resourcePath = '/api/campaign-messages/{id}/campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign,
            'fields[campaign]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getCampaignForCampaignMessageRequest`
     *
     * @deprecated use `getCampaignForCampaignMessageRequest` instead
     */
    public function getCampaignMessageCampaignRequest(...$args) {
        return $this->getCampaignForCampaignMessageRequest(...$args);
    }

    /**
     * Operation getCampaignIdForCampaignMessage
     *
     * Get Campaign ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignIdForCampaignMessage($id, $apiKey = null, string $contentType = self::contentTypes['getCampaignIdForCampaignMessage'][0])
    {
        list($response) = $this->getCampaignIdForCampaignMessageWithHttpInfo($id, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getCampaignIdForCampaignMessage`
     *
     * @deprecated use `getCampaignIdForCampaignMessage` instead
     */
    public function getCampaignMessageRelationshipsCampaign(...$args) {
        return $this->getCampaignIdForCampaignMessage(...$args);
    }

    /**
     * Operation getCampaignIdForCampaignMessageWithHttpInfo
     *
     * Get Campaign ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignIdForCampaignMessageWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getCampaignIdForCampaignMessage'][0])
    {
        $request = $this->getCampaignIdForCampaignMessageRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getCampaignIdForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getCampaignIdForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsCampaignWithHttpInfo(...$args) {
        return $this->getCampaignIdForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getCampaignIdForCampaignMessageAsync
     *
     * Get Campaign ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdForCampaignMessageAsync($id, $apiKey = null, string $contentType = self::contentTypes['getCampaignIdForCampaignMessage'][0])
    {
        return $this->getCampaignIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getCampaignIdForCampaignMessageAsync`
     *
     * @deprecated use `getCampaignIdForCampaignMessageAsync` instead
     */
    public function getCampaignMessageRelationshipsCampaignAsync(...$args) {
        return $this->getCampaignIdForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getCampaignIdForCampaignMessageAsyncWithHttpInfo
     *
     * Get Campaign ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getCampaignIdForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignIdForCampaignMessageRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getCampaignIdForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getCampaignIdForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsCampaignAsyncWithHttpInfo(...$args) {
        return $this->getCampaignIdForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getCampaignIdForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignIdForCampaignMessageRequest($id, $apiKey = null, string $contentType = self::contentTypes['getCampaignIdForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignIdForCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-messages/{id}/relationships/campaign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getCampaignIdForCampaignMessageRequest`
     *
     * @deprecated use `getCampaignIdForCampaignMessageRequest` instead
     */
    public function getCampaignMessageRelationshipsCampaignRequest(...$args) {
        return $this->getCampaignIdForCampaignMessageRequest(...$args);
    }

    /**
     * Operation getCampaignMessage
     *
     * Get Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignMessage($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignMessage'][0])
    {
        list($response) = $this->getCampaignMessageWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignMessageWithHttpInfo
     *
     * Get Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignMessageWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignMessage'][0])
    {
        $request = $this->getCampaignMessageRequest($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignMessageAsync
     *
     * Get Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignMessageAsync($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignMessage'][0])
    {
        return $this->getCampaignMessageAsyncWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignMessageAsyncWithHttpInfo
     *
     * Get Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignMessageAsyncWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignMessageRequest($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignMessage'
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignMessageRequest($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignMessage'
            );
        }







        $resourcePath = '/api/campaign-messages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_message,
            'fields[campaign-message]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign,
            'fields[campaign]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_image,
            'fields[image]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_template,
            'fields[template]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignRecipientEstimation
     *
     * Get Campaign Recipient Estimation
     *
     * @param  string $id The ID of the campaign for which to get the estimated number of recipients (required)
     * @param  string[]|null $fields_campaign_recipient_estimation For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignRecipientEstimation($id, $fields_campaign_recipient_estimation = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimation'][0])
    {
        list($response) = $this->getCampaignRecipientEstimationWithHttpInfo($id, $fields_campaign_recipient_estimation, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignRecipientEstimationWithHttpInfo
     *
     * Get Campaign Recipient Estimation
     *
     * @param  string $id The ID of the campaign for which to get the estimated number of recipients (required)
     * @param  string[]|null $fields_campaign_recipient_estimation For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignRecipientEstimationWithHttpInfo($id, $fields_campaign_recipient_estimation = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimation'][0])
    {
        $request = $this->getCampaignRecipientEstimationRequest($id, $fields_campaign_recipient_estimation, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignRecipientEstimationAsync
     *
     * Get Campaign Recipient Estimation
     *
     * @param  string $id The ID of the campaign for which to get the estimated number of recipients (required)
     * @param  string[]|null $fields_campaign_recipient_estimation For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignRecipientEstimationAsync($id, $fields_campaign_recipient_estimation = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimation'][0])
    {
        return $this->getCampaignRecipientEstimationAsyncWithHttpInfo($id, $fields_campaign_recipient_estimation, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignRecipientEstimationAsyncWithHttpInfo
     *
     * Get Campaign Recipient Estimation
     *
     * @param  string $id The ID of the campaign for which to get the estimated number of recipients (required)
     * @param  string[]|null $fields_campaign_recipient_estimation For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignRecipientEstimationAsyncWithHttpInfo($id, $fields_campaign_recipient_estimation = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimation'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignRecipientEstimationRequest($id, $fields_campaign_recipient_estimation, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignRecipientEstimation'
     *
     * @param  string $id The ID of the campaign for which to get the estimated number of recipients (required)
     * @param  string[]|null $fields_campaign_recipient_estimation For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignRecipientEstimationRequest($id, $fields_campaign_recipient_estimation = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignRecipientEstimation'
            );
        }



        $resourcePath = '/api/campaign-recipient-estimations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_recipient_estimation,
            'fields[campaign-recipient-estimation]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignRecipientEstimationJob
     *
     * Get Campaign Recipient Estimation Job
     *
     * @param  string $id The ID of the campaign to get recipient estimation status (required)
     * @param  string[]|null $fields_campaign_recipient_estimation_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimationJob'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignRecipientEstimationJob($id, $fields_campaign_recipient_estimation_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimationJob'][0])
    {
        list($response) = $this->getCampaignRecipientEstimationJobWithHttpInfo($id, $fields_campaign_recipient_estimation_job, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignRecipientEstimationJobWithHttpInfo
     *
     * Get Campaign Recipient Estimation Job
     *
     * @param  string $id The ID of the campaign to get recipient estimation status (required)
     * @param  string[]|null $fields_campaign_recipient_estimation_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimationJob'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignRecipientEstimationJobWithHttpInfo($id, $fields_campaign_recipient_estimation_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimationJob'][0])
    {
        $request = $this->getCampaignRecipientEstimationJobRequest($id, $fields_campaign_recipient_estimation_job, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignRecipientEstimationJobAsync
     *
     * Get Campaign Recipient Estimation Job
     *
     * @param  string $id The ID of the campaign to get recipient estimation status (required)
     * @param  string[]|null $fields_campaign_recipient_estimation_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimationJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignRecipientEstimationJobAsync($id, $fields_campaign_recipient_estimation_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimationJob'][0])
    {
        return $this->getCampaignRecipientEstimationJobAsyncWithHttpInfo($id, $fields_campaign_recipient_estimation_job, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignRecipientEstimationJobAsyncWithHttpInfo
     *
     * Get Campaign Recipient Estimation Job
     *
     * @param  string $id The ID of the campaign to get recipient estimation status (required)
     * @param  string[]|null $fields_campaign_recipient_estimation_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimationJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignRecipientEstimationJobAsyncWithHttpInfo($id, $fields_campaign_recipient_estimation_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimationJob'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignRecipientEstimationJobRequest($id, $fields_campaign_recipient_estimation_job, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignRecipientEstimationJob'
     *
     * @param  string $id The ID of the campaign to get recipient estimation status (required)
     * @param  string[]|null $fields_campaign_recipient_estimation_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignRecipientEstimationJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignRecipientEstimationJobRequest($id, $fields_campaign_recipient_estimation_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignRecipientEstimationJob'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignRecipientEstimationJob'
            );
        }



        $resourcePath = '/api/campaign-recipient-estimation-jobs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_recipient_estimation_job,
            'fields[campaign-recipient-estimation-job]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignSendJob
     *
     * Get Campaign Send Job
     *
     * @param  string $id The ID of the campaign to send (required)
     * @param  string[]|null $fields_campaign_send_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSendJob'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaignSendJob($id, $fields_campaign_send_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignSendJob'][0])
    {
        list($response) = $this->getCampaignSendJobWithHttpInfo($id, $fields_campaign_send_job, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignSendJobWithHttpInfo
     *
     * Get Campaign Send Job
     *
     * @param  string $id The ID of the campaign to send (required)
     * @param  string[]|null $fields_campaign_send_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSendJob'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignSendJobWithHttpInfo($id, $fields_campaign_send_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignSendJob'][0])
    {
        $request = $this->getCampaignSendJobRequest($id, $fields_campaign_send_job, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignSendJobAsync
     *
     * Get Campaign Send Job
     *
     * @param  string $id The ID of the campaign to send (required)
     * @param  string[]|null $fields_campaign_send_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSendJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignSendJobAsync($id, $fields_campaign_send_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignSendJob'][0])
    {
        return $this->getCampaignSendJobAsyncWithHttpInfo($id, $fields_campaign_send_job, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignSendJobAsyncWithHttpInfo
     *
     * Get Campaign Send Job
     *
     * @param  string $id The ID of the campaign to send (required)
     * @param  string[]|null $fields_campaign_send_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSendJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignSendJobAsyncWithHttpInfo($id, $fields_campaign_send_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignSendJob'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignSendJobRequest($id, $fields_campaign_send_job, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignSendJob'
     *
     * @param  string $id The ID of the campaign to send (required)
     * @param  string[]|null $fields_campaign_send_job For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSendJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignSendJobRequest($id, $fields_campaign_send_job = null, $apiKey = null, string $contentType = self::contentTypes['getCampaignSendJob'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignSendJob'
            );
        }



        $resourcePath = '/api/campaign-send-jobs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_send_job,
            'fields[campaign-send-job]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaigns
     *
     * Get Campaigns
     *
     * @param  string $filter For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60; (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  string|null $sort For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sorting (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaigns'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getCampaigns($filter, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $page_cursor = null, $sort = null, $apiKey = null, string $contentType = self::contentTypes['getCampaigns'][0])
    {
        list($response) = $this->getCampaignsWithHttpInfo($filter, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $page_cursor, $sort, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignsWithHttpInfo
     *
     * Get Campaigns
     *
     * @param  string $filter For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60; (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  string|null $sort For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sorting (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaigns'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignsWithHttpInfo($filter, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $page_cursor = null, $sort = null, $apiKey = null, string $contentType = self::contentTypes['getCampaigns'][0])
    {
        $request = $this->getCampaignsRequest($filter, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $page_cursor, $sort, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCampaignsAsync
     *
     * Get Campaigns
     *
     * @param  string $filter For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60; (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  string|null $sort For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sorting (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsAsync($filter, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $page_cursor = null, $sort = null, $apiKey = null, string $contentType = self::contentTypes['getCampaigns'][0])
    {
        return $this->getCampaignsAsyncWithHttpInfo($filter, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $page_cursor, $sort, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignsAsyncWithHttpInfo
     *
     * Get Campaigns
     *
     * @param  string $filter For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60; (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  string|null $sort For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sorting (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsAsyncWithHttpInfo($filter, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $page_cursor = null, $sort = null, $apiKey = null, string $contentType = self::contentTypes['getCampaigns'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getCampaignsRequest($filter, $fields_campaign_message, $fields_campaign, $fields_tag, $include, $page_cursor, $sort, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaigns'
     *
     * @param  string $filter For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;id&#x60;: &#x60;any&#x60;&lt;br&gt;&#x60;messages.channel&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;name&#x60;: &#x60;contains&#x60;&lt;br&gt;&#x60;status&#x60;: &#x60;any&#x60;, &#x60;equals&#x60;&lt;br&gt;&#x60;archived&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;created_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;scheduled_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;updated_at&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60; (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string|null $page_cursor For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#pagination (optional)
     * @param  string|null $sort For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sorting (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignsRequest($filter, $fields_campaign_message = null, $fields_campaign = null, $fields_tag = null, $include = null, $page_cursor = null, $sort = null, $apiKey = null, string $contentType = self::contentTypes['getCampaigns'][0])
    {

        // verify the required parameter 'filter' is set
        if ($filter === null || (is_array($filter) && count($filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filter when calling getCampaigns'
            );
        }








        $resourcePath = '/api/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_message,
            'fields[campaign-message]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign,
            'fields[campaign]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_tag,
            'fields[tag]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page[cursor]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImageForCampaignMessage
     *
     * Get Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getImageForCampaignMessage($id, $fields_image = null, $apiKey = null, string $contentType = self::contentTypes['getImageForCampaignMessage'][0])
    {
        list($response) = $this->getImageForCampaignMessageWithHttpInfo($id, $fields_image, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getImageForCampaignMessage`
     *
     * @deprecated use `getImageForCampaignMessage` instead
     */
    public function getCampaignMessageImage(...$args) {
        return $this->getImageForCampaignMessage(...$args);
    }

    /**
     * Operation getImageForCampaignMessageWithHttpInfo
     *
     * Get Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageForCampaignMessageWithHttpInfo($id, $fields_image = null, $apiKey = null, string $contentType = self::contentTypes['getImageForCampaignMessage'][0])
    {
        $request = $this->getImageForCampaignMessageRequest($id, $fields_image, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getImageForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getImageForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageImageWithHttpInfo(...$args) {
        return $this->getImageForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getImageForCampaignMessageAsync
     *
     * Get Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageForCampaignMessageAsync($id, $fields_image = null, $apiKey = null, string $contentType = self::contentTypes['getImageForCampaignMessage'][0])
    {
        return $this->getImageForCampaignMessageAsyncWithHttpInfo($id, $fields_image, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getImageForCampaignMessageAsync`
     *
     * @deprecated use `getImageForCampaignMessageAsync` instead
     */
    public function getCampaignMessageImageAsync(...$args) {
        return $this->getImageForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getImageForCampaignMessageAsyncWithHttpInfo
     *
     * Get Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageForCampaignMessageAsyncWithHttpInfo($id, $fields_image = null, $apiKey = null, string $contentType = self::contentTypes['getImageForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getImageForCampaignMessageRequest($id, $fields_image, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getImageForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getImageForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageImageAsyncWithHttpInfo(...$args) {
        return $this->getImageForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getImageForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImageForCampaignMessageRequest($id, $fields_image = null, $apiKey = null, string $contentType = self::contentTypes['getImageForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getImageForCampaignMessage'
            );
        }



        $resourcePath = '/api/campaign-messages/{id}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_image,
            'fields[image]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getImageForCampaignMessageRequest`
     *
     * @deprecated use `getImageForCampaignMessageRequest` instead
     */
    public function getCampaignMessageImageRequest(...$args) {
        return $this->getImageForCampaignMessageRequest(...$args);
    }

    /**
     * Operation getImageIdForCampaignMessage
     *
     * Get Image ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getImageIdForCampaignMessage($id, $apiKey = null, string $contentType = self::contentTypes['getImageIdForCampaignMessage'][0])
    {
        list($response) = $this->getImageIdForCampaignMessageWithHttpInfo($id, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getImageIdForCampaignMessage`
     *
     * @deprecated use `getImageIdForCampaignMessage` instead
     */
    public function getCampaignMessageRelationshipsImage(...$args) {
        return $this->getImageIdForCampaignMessage(...$args);
    }

    /**
     * Operation getImageIdForCampaignMessageWithHttpInfo
     *
     * Get Image ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageIdForCampaignMessageWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getImageIdForCampaignMessage'][0])
    {
        $request = $this->getImageIdForCampaignMessageRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getImageIdForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getImageIdForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsImageWithHttpInfo(...$args) {
        return $this->getImageIdForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getImageIdForCampaignMessageAsync
     *
     * Get Image ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageIdForCampaignMessageAsync($id, $apiKey = null, string $contentType = self::contentTypes['getImageIdForCampaignMessage'][0])
    {
        return $this->getImageIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getImageIdForCampaignMessageAsync`
     *
     * @deprecated use `getImageIdForCampaignMessageAsync` instead
     */
    public function getCampaignMessageRelationshipsImageAsync(...$args) {
        return $this->getImageIdForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getImageIdForCampaignMessageAsyncWithHttpInfo
     *
     * Get Image ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getImageIdForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getImageIdForCampaignMessageRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getImageIdForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getImageIdForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsImageAsyncWithHttpInfo(...$args) {
        return $this->getImageIdForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getImageIdForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImageIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImageIdForCampaignMessageRequest($id, $apiKey = null, string $contentType = self::contentTypes['getImageIdForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getImageIdForCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-messages/{id}/relationships/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getImageIdForCampaignMessageRequest`
     *
     * @deprecated use `getImageIdForCampaignMessageRequest` instead
     */
    public function getCampaignMessageRelationshipsImageRequest(...$args) {
        return $this->getImageIdForCampaignMessageRequest(...$args);
    }

    /**
     * Operation getMessageIdsForCampaign
     *
     * Get Message IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getMessageIdsForCampaign($id, $apiKey = null, string $contentType = self::contentTypes['getMessageIdsForCampaign'][0])
    {
        list($response) = $this->getMessageIdsForCampaignWithHttpInfo($id, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getMessageIdsForCampaign`
     *
     * @deprecated use `getMessageIdsForCampaign` instead
     */
    public function getCampaignRelationshipsCampaignMessages(...$args) {
        return $this->getMessageIdsForCampaign(...$args);
    }

    /**
     * Alias of `getMessageIdsForCampaign`
     *
     * @deprecated use `getMessageIdsForCampaign` instead
     */
    public function getCampaignRelationshipsMessages(...$args) {
        return $this->getMessageIdsForCampaign(...$args);
    }

    /**
     * Operation getMessageIdsForCampaignWithHttpInfo
     *
     * Get Message IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageIdsForCampaignWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getMessageIdsForCampaign'][0])
    {
        $request = $this->getMessageIdsForCampaignRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getMessageIdsForCampaignWithHttpInfo`
     *
     * @deprecated use `getMessageIdsForCampaignWithHttpInfo` instead
     */
    public function getCampaignRelationshipsCampaignMessagesWithHttpInfo(...$args) {
        return $this->getMessageIdsForCampaignWithHttpInfo(...$args);
    }

    /**
     * Alias of `getMessageIdsForCampaignWithHttpInfo`
     *
     * @deprecated use `getMessageIdsForCampaignWithHttpInfo` instead
     */
    public function getCampaignRelationshipsMessagesWithHttpInfo(...$args) {
        return $this->getMessageIdsForCampaignWithHttpInfo(...$args);
    }

    /**
     * Operation getMessageIdsForCampaignAsync
     *
     * Get Message IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageIdsForCampaignAsync($id, $apiKey = null, string $contentType = self::contentTypes['getMessageIdsForCampaign'][0])
    {
        return $this->getMessageIdsForCampaignAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getMessageIdsForCampaignAsync`
     *
     * @deprecated use `getMessageIdsForCampaignAsync` instead
     */
    public function getCampaignRelationshipsCampaignMessagesAsync(...$args) {
        return $this->getMessageIdsForCampaignAsync(...$args);
    }

    /**
     * Alias of `getMessageIdsForCampaignAsync`
     *
     * @deprecated use `getMessageIdsForCampaignAsync` instead
     */
    public function getCampaignRelationshipsMessagesAsync(...$args) {
        return $this->getMessageIdsForCampaignAsync(...$args);
    }

    /**
     * Operation getMessageIdsForCampaignAsyncWithHttpInfo
     *
     * Get Message IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageIdsForCampaignAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getMessageIdsForCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getMessageIdsForCampaignRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getMessageIdsForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getMessageIdsForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignRelationshipsCampaignMessagesAsyncWithHttpInfo(...$args) {
        return $this->getMessageIdsForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Alias of `getMessageIdsForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getMessageIdsForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignRelationshipsMessagesAsyncWithHttpInfo(...$args) {
        return $this->getMessageIdsForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getMessageIdsForCampaign'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessageIdsForCampaignRequest($id, $apiKey = null, string $contentType = self::contentTypes['getMessageIdsForCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMessageIdsForCampaign'
            );
        }


        $resourcePath = '/api/campaigns/{id}/relationships/campaign-messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getMessageIdsForCampaignRequest`
     *
     * @deprecated use `getMessageIdsForCampaignRequest` instead
     */
    public function getCampaignRelationshipsCampaignMessagesRequest(...$args) {
        return $this->getMessageIdsForCampaignRequest(...$args);
    }

    /**
     * Alias of `getMessageIdsForCampaignRequest`
     *
     * @deprecated use `getMessageIdsForCampaignRequest` instead
     */
    public function getCampaignRelationshipsMessagesRequest(...$args) {
        return $this->getMessageIdsForCampaignRequest(...$args);
    }

    /**
     * Operation getMessagesForCampaign
     *
     * Get Messages for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getMessagesForCampaign($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getMessagesForCampaign'][0])
    {
        list($response) = $this->getMessagesForCampaignWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getMessagesForCampaign`
     *
     * @deprecated use `getMessagesForCampaign` instead
     */
    public function getCampaignCampaignMessages(...$args) {
        return $this->getMessagesForCampaign(...$args);
    }

    /**
     * Alias of `getMessagesForCampaign`
     *
     * @deprecated use `getMessagesForCampaign` instead
     */
    public function getCampaignMessages(...$args) {
        return $this->getMessagesForCampaign(...$args);
    }

    /**
     * Operation getMessagesForCampaignWithHttpInfo
     *
     * Get Messages for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessagesForCampaignWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getMessagesForCampaign'][0])
    {
        $request = $this->getMessagesForCampaignRequest($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getMessagesForCampaignWithHttpInfo`
     *
     * @deprecated use `getMessagesForCampaignWithHttpInfo` instead
     */
    public function getCampaignCampaignMessagesWithHttpInfo(...$args) {
        return $this->getMessagesForCampaignWithHttpInfo(...$args);
    }

    /**
     * Alias of `getMessagesForCampaignWithHttpInfo`
     *
     * @deprecated use `getMessagesForCampaignWithHttpInfo` instead
     */
    public function getCampaignMessagesWithHttpInfo(...$args) {
        return $this->getMessagesForCampaignWithHttpInfo(...$args);
    }

    /**
     * Operation getMessagesForCampaignAsync
     *
     * Get Messages for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesForCampaignAsync($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getMessagesForCampaign'][0])
    {
        return $this->getMessagesForCampaignAsyncWithHttpInfo($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getMessagesForCampaignAsync`
     *
     * @deprecated use `getMessagesForCampaignAsync` instead
     */
    public function getCampaignCampaignMessagesAsync(...$args) {
        return $this->getMessagesForCampaignAsync(...$args);
    }

    /**
     * Alias of `getMessagesForCampaignAsync`
     *
     * @deprecated use `getMessagesForCampaignAsync` instead
     */
    public function getCampaignMessagesAsync(...$args) {
        return $this->getMessagesForCampaignAsync(...$args);
    }

    /**
     * Operation getMessagesForCampaignAsyncWithHttpInfo
     *
     * Get Messages for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesForCampaignAsyncWithHttpInfo($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getMessagesForCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getMessagesForCampaignRequest($id, $fields_campaign_message, $fields_campaign, $fields_image, $fields_template, $include, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getMessagesForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getMessagesForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignCampaignMessagesAsyncWithHttpInfo(...$args) {
        return $this->getMessagesForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Alias of `getMessagesForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getMessagesForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignMessagesAsyncWithHttpInfo(...$args) {
        return $this->getMessagesForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getMessagesForCampaign'
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_campaign_message For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_campaign For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_image For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string[]|null $include For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#relationships (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessagesForCampaignRequest($id, $fields_campaign_message = null, $fields_campaign = null, $fields_image = null, $fields_template = null, $include = null, $apiKey = null, string $contentType = self::contentTypes['getMessagesForCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMessagesForCampaign'
            );
        }







        $resourcePath = '/api/campaigns/{id}/campaign-messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign_message,
            'fields[campaign-message]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_campaign,
            'fields[campaign]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_image,
            'fields[image]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_template,
            'fields[template]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getMessagesForCampaignRequest`
     *
     * @deprecated use `getMessagesForCampaignRequest` instead
     */
    public function getCampaignCampaignMessagesRequest(...$args) {
        return $this->getMessagesForCampaignRequest(...$args);
    }

    /**
     * Alias of `getMessagesForCampaignRequest`
     *
     * @deprecated use `getMessagesForCampaignRequest` instead
     */
    public function getCampaignMessagesRequest(...$args) {
        return $this->getMessagesForCampaignRequest(...$args);
    }

    /**
     * Operation getTagIdsForCampaign
     *
     * Get Tag IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getTagIdsForCampaign($id, $apiKey = null, string $contentType = self::contentTypes['getTagIdsForCampaign'][0])
    {
        list($response) = $this->getTagIdsForCampaignWithHttpInfo($id, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getTagIdsForCampaign`
     *
     * @deprecated use `getTagIdsForCampaign` instead
     */
    public function getCampaignRelationshipsTags(...$args) {
        return $this->getTagIdsForCampaign(...$args);
    }

    /**
     * Operation getTagIdsForCampaignWithHttpInfo
     *
     * Get Tag IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagIdsForCampaignWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getTagIdsForCampaign'][0])
    {
        $request = $this->getTagIdsForCampaignRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getTagIdsForCampaignWithHttpInfo`
     *
     * @deprecated use `getTagIdsForCampaignWithHttpInfo` instead
     */
    public function getCampaignRelationshipsTagsWithHttpInfo(...$args) {
        return $this->getTagIdsForCampaignWithHttpInfo(...$args);
    }

    /**
     * Operation getTagIdsForCampaignAsync
     *
     * Get Tag IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagIdsForCampaignAsync($id, $apiKey = null, string $contentType = self::contentTypes['getTagIdsForCampaign'][0])
    {
        return $this->getTagIdsForCampaignAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getTagIdsForCampaignAsync`
     *
     * @deprecated use `getTagIdsForCampaignAsync` instead
     */
    public function getCampaignRelationshipsTagsAsync(...$args) {
        return $this->getTagIdsForCampaignAsync(...$args);
    }

    /**
     * Operation getTagIdsForCampaignAsyncWithHttpInfo
     *
     * Get Tag IDs for Campaign
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagIdsForCampaignAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getTagIdsForCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getTagIdsForCampaignRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getTagIdsForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getTagIdsForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignRelationshipsTagsAsyncWithHttpInfo(...$args) {
        return $this->getTagIdsForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getTagIdsForCampaign'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagIdsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagIdsForCampaignRequest($id, $apiKey = null, string $contentType = self::contentTypes['getTagIdsForCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTagIdsForCampaign'
            );
        }


        $resourcePath = '/api/campaigns/{id}/relationships/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getTagIdsForCampaignRequest`
     *
     * @deprecated use `getTagIdsForCampaignRequest` instead
     */
    public function getCampaignRelationshipsTagsRequest(...$args) {
        return $this->getTagIdsForCampaignRequest(...$args);
    }

    /**
     * Operation getTagsForCampaign
     *
     * Get Tags for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getTagsForCampaign($id, $fields_tag = null, $apiKey = null, string $contentType = self::contentTypes['getTagsForCampaign'][0])
    {
        list($response) = $this->getTagsForCampaignWithHttpInfo($id, $fields_tag, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getTagsForCampaign`
     *
     * @deprecated use `getTagsForCampaign` instead
     */
    public function getCampaignTags(...$args) {
        return $this->getTagsForCampaign(...$args);
    }

    /**
     * Operation getTagsForCampaignWithHttpInfo
     *
     * Get Tags for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagsForCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagsForCampaignWithHttpInfo($id, $fields_tag = null, $apiKey = null, string $contentType = self::contentTypes['getTagsForCampaign'][0])
    {
        $request = $this->getTagsForCampaignRequest($id, $fields_tag, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getTagsForCampaignWithHttpInfo`
     *
     * @deprecated use `getTagsForCampaignWithHttpInfo` instead
     */
    public function getCampaignTagsWithHttpInfo(...$args) {
        return $this->getTagsForCampaignWithHttpInfo(...$args);
    }

    /**
     * Operation getTagsForCampaignAsync
     *
     * Get Tags for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsForCampaignAsync($id, $fields_tag = null, $apiKey = null, string $contentType = self::contentTypes['getTagsForCampaign'][0])
    {
        return $this->getTagsForCampaignAsyncWithHttpInfo($id, $fields_tag, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getTagsForCampaignAsync`
     *
     * @deprecated use `getTagsForCampaignAsync` instead
     */
    public function getCampaignTagsAsync(...$args) {
        return $this->getTagsForCampaignAsync(...$args);
    }

    /**
     * Operation getTagsForCampaignAsyncWithHttpInfo
     *
     * Get Tags for Campaign
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsForCampaignAsyncWithHttpInfo($id, $fields_tag = null, $apiKey = null, string $contentType = self::contentTypes['getTagsForCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getTagsForCampaignRequest($id, $fields_tag, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getTagsForCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `getTagsForCampaignAsyncWithHttpInfo` instead
     */
    public function getCampaignTagsAsyncWithHttpInfo(...$args) {
        return $this->getTagsForCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getTagsForCampaign'
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_tag For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTagsForCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagsForCampaignRequest($id, $fields_tag = null, $apiKey = null, string $contentType = self::contentTypes['getTagsForCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTagsForCampaign'
            );
        }



        $resourcePath = '/api/campaigns/{id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_tag,
            'fields[tag]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getTagsForCampaignRequest`
     *
     * @deprecated use `getTagsForCampaignRequest` instead
     */
    public function getCampaignTagsRequest(...$args) {
        return $this->getTagsForCampaignRequest(...$args);
    }

    /**
     * Operation getTemplateForCampaignMessage
     *
     * Get Template for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getTemplateForCampaignMessage($id, $fields_template = null, $apiKey = null, string $contentType = self::contentTypes['getTemplateForCampaignMessage'][0])
    {
        list($response) = $this->getTemplateForCampaignMessageWithHttpInfo($id, $fields_template, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getTemplateForCampaignMessage`
     *
     * @deprecated use `getTemplateForCampaignMessage` instead
     */
    public function getCampaignMessageTemplate(...$args) {
        return $this->getTemplateForCampaignMessage(...$args);
    }

    /**
     * Operation getTemplateForCampaignMessageWithHttpInfo
     *
     * Get Template for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTemplateForCampaignMessageWithHttpInfo($id, $fields_template = null, $apiKey = null, string $contentType = self::contentTypes['getTemplateForCampaignMessage'][0])
    {
        $request = $this->getTemplateForCampaignMessageRequest($id, $fields_template, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getTemplateForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getTemplateForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageTemplateWithHttpInfo(...$args) {
        return $this->getTemplateForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getTemplateForCampaignMessageAsync
     *
     * Get Template for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateForCampaignMessageAsync($id, $fields_template = null, $apiKey = null, string $contentType = self::contentTypes['getTemplateForCampaignMessage'][0])
    {
        return $this->getTemplateForCampaignMessageAsyncWithHttpInfo($id, $fields_template, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getTemplateForCampaignMessageAsync`
     *
     * @deprecated use `getTemplateForCampaignMessageAsync` instead
     */
    public function getCampaignMessageTemplateAsync(...$args) {
        return $this->getTemplateForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getTemplateForCampaignMessageAsyncWithHttpInfo
     *
     * Get Template for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateForCampaignMessageAsyncWithHttpInfo($id, $fields_template = null, $apiKey = null, string $contentType = self::contentTypes['getTemplateForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getTemplateForCampaignMessageRequest($id, $fields_template, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getTemplateForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getTemplateForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageTemplateAsyncWithHttpInfo(...$args) {
        return $this->getTemplateForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getTemplateForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string[]|null $fields_template For more information please visit https://developers.klaviyo.com/en/v2025-07-15/reference/api-overview#sparse-fieldsets (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTemplateForCampaignMessageRequest($id, $fields_template = null, $apiKey = null, string $contentType = self::contentTypes['getTemplateForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTemplateForCampaignMessage'
            );
        }



        $resourcePath = '/api/campaign-messages/{id}/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_template,
            'fields[template]', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getTemplateForCampaignMessageRequest`
     *
     * @deprecated use `getTemplateForCampaignMessageRequest` instead
     */
    public function getCampaignMessageTemplateRequest(...$args) {
        return $this->getTemplateForCampaignMessageRequest(...$args);
    }

    /**
     * Operation getTemplateIdForCampaignMessage
     *
     * Get Template ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function getTemplateIdForCampaignMessage($id, $apiKey = null, string $contentType = self::contentTypes['getTemplateIdForCampaignMessage'][0])
    {
        list($response) = $this->getTemplateIdForCampaignMessageWithHttpInfo($id, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `getTemplateIdForCampaignMessage`
     *
     * @deprecated use `getTemplateIdForCampaignMessage` instead
     */
    public function getCampaignMessageRelationshipsTemplate(...$args) {
        return $this->getTemplateIdForCampaignMessage(...$args);
    }

    /**
     * Operation getTemplateIdForCampaignMessageWithHttpInfo
     *
     * Get Template ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTemplateIdForCampaignMessageWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getTemplateIdForCampaignMessage'][0])
    {
        $request = $this->getTemplateIdForCampaignMessageRequest($id, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `getTemplateIdForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `getTemplateIdForCampaignMessageWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsTemplateWithHttpInfo(...$args) {
        return $this->getTemplateIdForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation getTemplateIdForCampaignMessageAsync
     *
     * Get Template ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateIdForCampaignMessageAsync($id, $apiKey = null, string $contentType = self::contentTypes['getTemplateIdForCampaignMessage'][0])
    {
        return $this->getTemplateIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `getTemplateIdForCampaignMessageAsync`
     *
     * @deprecated use `getTemplateIdForCampaignMessageAsync` instead
     */
    public function getCampaignMessageRelationshipsTemplateAsync(...$args) {
        return $this->getTemplateIdForCampaignMessageAsync(...$args);
    }

    /**
     * Operation getTemplateIdForCampaignMessageAsyncWithHttpInfo
     *
     * Get Template ID for Campaign Message
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTemplateIdForCampaignMessageAsyncWithHttpInfo($id, $apiKey = null, string $contentType = self::contentTypes['getTemplateIdForCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->getTemplateIdForCampaignMessageRequest($id, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `getTemplateIdForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `getTemplateIdForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function getCampaignMessageRelationshipsTemplateAsyncWithHttpInfo(...$args) {
        return $this->getTemplateIdForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'getTemplateIdForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTemplateIdForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTemplateIdForCampaignMessageRequest($id, $apiKey = null, string $contentType = self::contentTypes['getTemplateIdForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTemplateIdForCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-messages/{id}/relationships/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `getTemplateIdForCampaignMessageRequest`
     *
     * @deprecated use `getTemplateIdForCampaignMessageRequest` instead
     */
    public function getCampaignMessageRelationshipsTemplateRequest(...$args) {
        return $this->getTemplateIdForCampaignMessageRequest(...$args);
    }

    /**
     * Operation refreshCampaignRecipientEstimation
     *
     * Refresh Campaign Recipient Estimation
     *
     * @param  \KlaviyoAPI\Model\CampaignRecipientEstimationJobCreateQuery $campaign_recipient_estimation_job_create_query Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function refreshCampaignRecipientEstimation($campaign_recipient_estimation_job_create_query, $apiKey = null, string $contentType = self::contentTypes['refreshCampaignRecipientEstimation'][0])
    {
        list($response) = $this->refreshCampaignRecipientEstimationWithHttpInfo($campaign_recipient_estimation_job_create_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `refreshCampaignRecipientEstimation`
     *
     * @deprecated use `refreshCampaignRecipientEstimation` instead
     */
    public function createCampaignRecipientEstimationJob(...$args) {
        return $this->refreshCampaignRecipientEstimation(...$args);
    }

    /**
     * Operation refreshCampaignRecipientEstimationWithHttpInfo
     *
     * Refresh Campaign Recipient Estimation
     *
     * @param  \KlaviyoAPI\Model\CampaignRecipientEstimationJobCreateQuery $campaign_recipient_estimation_job_create_query Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshCampaignRecipientEstimationWithHttpInfo($campaign_recipient_estimation_job_create_query, $apiKey = null, string $contentType = self::contentTypes['refreshCampaignRecipientEstimation'][0])
    {
        $request = $this->refreshCampaignRecipientEstimationRequest($campaign_recipient_estimation_job_create_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `refreshCampaignRecipientEstimationWithHttpInfo`
     *
     * @deprecated use `refreshCampaignRecipientEstimationWithHttpInfo` instead
     */
    public function createCampaignRecipientEstimationJobWithHttpInfo(...$args) {
        return $this->refreshCampaignRecipientEstimationWithHttpInfo(...$args);
    }

    /**
     * Operation refreshCampaignRecipientEstimationAsync
     *
     * Refresh Campaign Recipient Estimation
     *
     * @param  \KlaviyoAPI\Model\CampaignRecipientEstimationJobCreateQuery $campaign_recipient_estimation_job_create_query Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshCampaignRecipientEstimationAsync($campaign_recipient_estimation_job_create_query, $apiKey = null, string $contentType = self::contentTypes['refreshCampaignRecipientEstimation'][0])
    {
        return $this->refreshCampaignRecipientEstimationAsyncWithHttpInfo($campaign_recipient_estimation_job_create_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `refreshCampaignRecipientEstimationAsync`
     *
     * @deprecated use `refreshCampaignRecipientEstimationAsync` instead
     */
    public function createCampaignRecipientEstimationJobAsync(...$args) {
        return $this->refreshCampaignRecipientEstimationAsync(...$args);
    }

    /**
     * Operation refreshCampaignRecipientEstimationAsyncWithHttpInfo
     *
     * Refresh Campaign Recipient Estimation
     *
     * @param  \KlaviyoAPI\Model\CampaignRecipientEstimationJobCreateQuery $campaign_recipient_estimation_job_create_query Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshCampaignRecipientEstimationAsyncWithHttpInfo($campaign_recipient_estimation_job_create_query, $apiKey = null, string $contentType = self::contentTypes['refreshCampaignRecipientEstimation'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->refreshCampaignRecipientEstimationRequest($campaign_recipient_estimation_job_create_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `refreshCampaignRecipientEstimationAsyncWithHttpInfo`
     *
     * @deprecated use `refreshCampaignRecipientEstimationAsyncWithHttpInfo` instead
     */
    public function createCampaignRecipientEstimationJobAsyncWithHttpInfo(...$args) {
        return $this->refreshCampaignRecipientEstimationAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'refreshCampaignRecipientEstimation'
     *
     * @param  \KlaviyoAPI\Model\CampaignRecipientEstimationJobCreateQuery $campaign_recipient_estimation_job_create_query Trigger an asynchronous job to update the estimated number of recipients for the given campaign ID. Use the &#x60;Get Campaign Recipient Estimation Job&#x60; endpoint to retrieve the status of this estimation job. Use the &#x60;Get Campaign Recipient Estimation&#x60; endpoint to retrieve the estimated recipient count for a given campaign. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshCampaignRecipientEstimation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshCampaignRecipientEstimationRequest($campaign_recipient_estimation_job_create_query, $apiKey = null, string $contentType = self::contentTypes['refreshCampaignRecipientEstimation'][0])
    {

        // verify the required parameter 'campaign_recipient_estimation_job_create_query' is set
        if ($campaign_recipient_estimation_job_create_query === null || (is_array($campaign_recipient_estimation_job_create_query) && count($campaign_recipient_estimation_job_create_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_recipient_estimation_job_create_query when calling refreshCampaignRecipientEstimation'
            );
        }


        $resourcePath = '/api/campaign-recipient-estimation-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_recipient_estimation_job_create_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_recipient_estimation_job_create_query));
            } else {
                $httpBody = $campaign_recipient_estimation_job_create_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `refreshCampaignRecipientEstimationRequest`
     *
     * @deprecated use `refreshCampaignRecipientEstimationRequest` instead
     */
    public function createCampaignRecipientEstimationJobRequest(...$args) {
        return $this->refreshCampaignRecipientEstimationRequest(...$args);
    }

    /**
     * Operation sendCampaign
     *
     * Send Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignSendJobCreateQuery $campaign_send_job_create_query Trigger the campaign to send asynchronously (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function sendCampaign($campaign_send_job_create_query, $apiKey = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        list($response) = $this->sendCampaignWithHttpInfo($campaign_send_job_create_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Alias of `sendCampaign`
     *
     * @deprecated use `sendCampaign` instead
     */
    public function createCampaignSendJob(...$args) {
        return $this->sendCampaign(...$args);
    }

    /**
     * Operation sendCampaignWithHttpInfo
     *
     * Send Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignSendJobCreateQuery $campaign_send_job_create_query Trigger the campaign to send asynchronously (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendCampaignWithHttpInfo($campaign_send_job_create_query, $apiKey = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        $request = $this->sendCampaignRequest($campaign_send_job_create_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `sendCampaignWithHttpInfo`
     *
     * @deprecated use `sendCampaignWithHttpInfo` instead
     */
    public function createCampaignSendJobWithHttpInfo(...$args) {
        return $this->sendCampaignWithHttpInfo(...$args);
    }

    /**
     * Operation sendCampaignAsync
     *
     * Send Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignSendJobCreateQuery $campaign_send_job_create_query Trigger the campaign to send asynchronously (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCampaignAsync($campaign_send_job_create_query, $apiKey = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        return $this->sendCampaignAsyncWithHttpInfo($campaign_send_job_create_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `sendCampaignAsync`
     *
     * @deprecated use `sendCampaignAsync` instead
     */
    public function createCampaignSendJobAsync(...$args) {
        return $this->sendCampaignAsync(...$args);
    }

    /**
     * Operation sendCampaignAsyncWithHttpInfo
     *
     * Send Campaign
     *
     * @param  \KlaviyoAPI\Model\CampaignSendJobCreateQuery $campaign_send_job_create_query Trigger the campaign to send asynchronously (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCampaignAsyncWithHttpInfo($campaign_send_job_create_query, $apiKey = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->sendCampaignRequest($campaign_send_job_create_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `sendCampaignAsyncWithHttpInfo`
     *
     * @deprecated use `sendCampaignAsyncWithHttpInfo` instead
     */
    public function createCampaignSendJobAsyncWithHttpInfo(...$args) {
        return $this->sendCampaignAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'sendCampaign'
     *
     * @param  \KlaviyoAPI\Model\CampaignSendJobCreateQuery $campaign_send_job_create_query Trigger the campaign to send asynchronously (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendCampaignRequest($campaign_send_job_create_query, $apiKey = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {

        // verify the required parameter 'campaign_send_job_create_query' is set
        if ($campaign_send_job_create_query === null || (is_array($campaign_send_job_create_query) && count($campaign_send_job_create_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_send_job_create_query when calling sendCampaign'
            );
        }


        $resourcePath = '/api/campaign-send-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_send_job_create_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_send_job_create_query));
            } else {
                $httpBody = $campaign_send_job_create_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `sendCampaignRequest`
     *
     * @deprecated use `sendCampaignRequest` instead
     */
    public function createCampaignSendJobRequest(...$args) {
        return $this->sendCampaignRequest(...$args);
    }

    /**
     * Operation updateCampaign
     *
     * Update Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignPartialUpdateQuery $campaign_partial_update_query Update a campaign and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function updateCampaign($id, $campaign_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        list($response) = $this->updateCampaignWithHttpInfo($id, $campaign_partial_update_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignWithHttpInfo
     *
     * Update Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignPartialUpdateQuery $campaign_partial_update_query Update a campaign and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignWithHttpInfo($id, $campaign_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        $request = $this->updateCampaignRequest($id, $campaign_partial_update_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCampaignAsync
     *
     * Update Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignPartialUpdateQuery $campaign_partial_update_query Update a campaign and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsync($id, $campaign_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        return $this->updateCampaignAsyncWithHttpInfo($id, $campaign_partial_update_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignAsyncWithHttpInfo
     *
     * Update Campaign
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignPartialUpdateQuery $campaign_partial_update_query Update a campaign and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsyncWithHttpInfo($id, $campaign_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->updateCampaignRequest($id, $campaign_partial_update_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCampaign'
     *
     * @param  string $id The campaign ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignPartialUpdateQuery $campaign_partial_update_query Update a campaign and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignRequest($id, $campaign_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCampaign'
            );
        }

        // verify the required parameter 'campaign_partial_update_query' is set
        if ($campaign_partial_update_query === null || (is_array($campaign_partial_update_query) && count($campaign_partial_update_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_partial_update_query when calling updateCampaign'
            );
        }


        $resourcePath = '/api/campaigns/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_partial_update_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_partial_update_query));
            } else {
                $httpBody = $campaign_partial_update_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCampaignMessage
     *
     * Update Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignMessagePartialUpdateQuery $campaign_message_partial_update_query Update a message and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response
     */
    public function updateCampaignMessage($id, $campaign_message_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaignMessage'][0])
    {
        list($response) = $this->updateCampaignMessageWithHttpInfo($id, $campaign_message_partial_update_query, $apiKey, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignMessageWithHttpInfo
     *
     * Update Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignMessagePartialUpdateQuery $campaign_message_partial_update_query Update a message and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\KlaviyoAPI\Model\GetAccounts400Response|\KlaviyoAPI\Model\GetAccounts400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignMessageWithHttpInfo($id, $campaign_message_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaignMessage'][0])
    {
        $request = $this->updateCampaignMessageRequest($id, $campaign_message_partial_update_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCampaignMessageAsync
     *
     * Update Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignMessagePartialUpdateQuery $campaign_message_partial_update_query Update a message and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignMessageAsync($id, $campaign_message_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaignMessage'][0])
    {
        return $this->updateCampaignMessageAsyncWithHttpInfo($id, $campaign_message_partial_update_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignMessageAsyncWithHttpInfo
     *
     * Update Campaign Message
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignMessagePartialUpdateQuery $campaign_message_partial_update_query Update a message and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignMessageAsyncWithHttpInfo($id, $campaign_message_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaignMessage'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->updateCampaignMessageRequest($id, $campaign_message_partial_update_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    $parsed_content = json_decode(json_encode($content), TRUE);
                    if (json_last_error() != JSON_ERROR_NONE) {
                        $parsed_content = $content;
                    }

                    return [
                        $parsed_content,
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCampaignMessage'
     *
     * @param  string $id The message ID to be retrieved (required)
     * @param  \KlaviyoAPI\Model\CampaignMessagePartialUpdateQuery $campaign_message_partial_update_query Update a message and return it (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignMessageRequest($id, $campaign_message_partial_update_query, $apiKey = null, string $contentType = self::contentTypes['updateCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCampaignMessage'
            );
        }

        // verify the required parameter 'campaign_message_partial_update_query' is set
        if ($campaign_message_partial_update_query === null || (is_array($campaign_message_partial_update_query) && count($campaign_message_partial_update_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_message_partial_update_query when calling updateCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-messages/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_message_partial_update_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_message_partial_update_query));
            } else {
                $httpBody = $campaign_message_partial_update_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateImageForCampaignMessage
     *
     * Update Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  \KlaviyoAPI\Model\CampaignMessageImageUpdateQuery $campaign_message_image_update_query campaign_message_image_update_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateImageForCampaignMessage($id, $campaign_message_image_update_query, $apiKey = null, string $contentType = self::contentTypes['updateImageForCampaignMessage'][0])
    {
        $this->updateImageForCampaignMessageWithHttpInfo($id, $campaign_message_image_update_query, $apiKey, $contentType);
    }

    /**
     * Alias of `updateImageForCampaignMessage`
     *
     * @deprecated use `updateImageForCampaignMessage` instead
     */
    public function updateCampaignMessageRelationshipsImage(...$args) {
        return $this->updateImageForCampaignMessage(...$args);
    }

    /**
     * Operation updateImageForCampaignMessageWithHttpInfo
     *
     * Update Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  \KlaviyoAPI\Model\CampaignMessageImageUpdateQuery $campaign_message_image_update_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \KlaviyoAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImageForCampaignMessageWithHttpInfo($id, $campaign_message_image_update_query, $apiKey = null, string $contentType = self::contentTypes['updateImageForCampaignMessage'][0])
    {
        $request = $this->updateImageForCampaignMessageRequest($id, $campaign_message_image_update_query, $apiKey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\KlaviyoAPI\Model\GetAccounts400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Alias of `updateImageForCampaignMessageWithHttpInfo`
     *
     * @deprecated use `updateImageForCampaignMessageWithHttpInfo` instead
     */
    public function updateCampaignMessageRelationshipsImageWithHttpInfo(...$args) {
        return $this->updateImageForCampaignMessageWithHttpInfo(...$args);
    }

    /**
     * Operation updateImageForCampaignMessageAsync
     *
     * Update Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  \KlaviyoAPI\Model\CampaignMessageImageUpdateQuery $campaign_message_image_update_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageForCampaignMessageAsync($id, $campaign_message_image_update_query, $apiKey = null, string $contentType = self::contentTypes['updateImageForCampaignMessage'][0])
    {
        return $this->updateImageForCampaignMessageAsyncWithHttpInfo($id, $campaign_message_image_update_query, $apiKey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Alias of `updateImageForCampaignMessageAsync`
     *
     * @deprecated use `updateImageForCampaignMessageAsync` instead
     */
    public function updateCampaignMessageRelationshipsImageAsync(...$args) {
        return $this->updateImageForCampaignMessageAsync(...$args);
    }

    /**
     * Operation updateImageForCampaignMessageAsyncWithHttpInfo
     *
     * Update Image for Campaign Message
     *
     * @param  string $id  (required)
     * @param  \KlaviyoAPI\Model\CampaignMessageImageUpdateQuery $campaign_message_image_update_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageForCampaignMessageAsyncWithHttpInfo($id, $campaign_message_image_update_query, $apiKey = null, string $contentType = self::contentTypes['updateImageForCampaignMessage'][0])
    {
        $returnType = '';
        $request = $this->updateImageForCampaignMessageRequest($id, $campaign_message_image_update_query, $apiKey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Alias of `updateImageForCampaignMessageAsyncWithHttpInfo`
     *
     * @deprecated use `updateImageForCampaignMessageAsyncWithHttpInfo` instead
     */
    public function updateCampaignMessageRelationshipsImageAsyncWithHttpInfo(...$args) {
        return $this->updateImageForCampaignMessageAsyncWithHttpInfo(...$args);
    }

    /**
     * Create request for operation 'updateImageForCampaignMessage'
     *
     * @param  string $id  (required)
     * @param  \KlaviyoAPI\Model\CampaignMessageImageUpdateQuery $campaign_message_image_update_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageForCampaignMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateImageForCampaignMessageRequest($id, $campaign_message_image_update_query, $apiKey = null, string $contentType = self::contentTypes['updateImageForCampaignMessage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateImageForCampaignMessage'
            );
        }

        // verify the required parameter 'campaign_message_image_update_query' is set
        if ($campaign_message_image_update_query === null || (is_array($campaign_message_image_update_query) && count($campaign_message_image_update_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_message_image_update_query when calling updateImageForCampaignMessage'
            );
        }


        $resourcePath = '/api/campaign-messages/{id}/relationships/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($campaign_message_image_update_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($campaign_message_image_update_query));
            } else {
                $httpBody = $campaign_message_image_update_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false || stripos($headers['Content-Type'], 'application/vnd.api+json') !== false) {
                # if Content-Type contains "application/json" or "application/vnd.api+json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        if ($apiKey == null) {
            $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        } else {
            $apiKey = 'Klaviyo-API-Key '.$apiKey;
        }

        $headers['Authorization'] = $apiKey;


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $defaultHeaders['revision'] = ['2025-07-15'];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Alias of `updateImageForCampaignMessageRequest`
     *
     * @deprecated use `updateImageForCampaignMessageRequest` instead
     */
    public function updateCampaignMessageRelationshipsImageRequest(...$args) {
        return $this->updateImageForCampaignMessageRequest(...$args);
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        $parsed_content = json_decode(json_encode($content), TRUE);
        if (json_last_error() != JSON_ERROR_NONE) {
            $parsed_content = $content;
        }

        return [
            $parsed_content,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
